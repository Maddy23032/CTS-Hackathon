
import React, { useState, useMemo, useEffect } from 'react';
import type { Vulnerability, VulnerabilityType } from './types';
import { MOCK_VULNERABILITIES, VULNERABILITY_TYPE_CONFIG } from './constants';
// import { runScan } from './services/scanService'; // Not auto-triggering scans; consuming static JSON
import Header from './components/Header';
import VulnerabilityChart from './components/VulnerabilityChart';
import VulnerabilityTable from './components/VulnerabilityTable';
import VulnerabilityDetailModal from './components/VulnerabilityDetailModal';
import VulnerabilitySummary from './components/VulnerabilitySummary';

const App: React.FC = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>(MOCK_VULNERABILITIES);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Load static JSON report if generated by backend CLI (vuln-report.json placed in public root)
    setLoading(true);
    fetch('/vuln-report.json', { cache: 'no-store' })
      .then(r => r.ok ? r.json() : Promise.reject(new Error('No report yet')))
      .then(data => {
        if (Array.isArray(data.findings)) {
          const mapped = data.findings.map((v: any) => ({
            id: v.id,
            name: v.name,
            type: v.type,
            severity: v.severity,
            cvss: v.cvss,
            epss: v.epss,
            description: v.description,
            evidence: v.evidence
          }));
          if (mapped.length) setVulnerabilities(mapped);
        }
      })
      .catch(() => {/* silently ignore until user generates */})
      .finally(() => setLoading(false));
  }, []);
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);

  const chartData = useMemo(() => {
    const counts = vulnerabilities.reduce((acc, vuln) => {
      acc[vuln.type] = (acc[vuln.type] || 0) + 1;
      return acc;
    }, {} as Record<VulnerabilityType, number>);

    return (Object.keys(VULNERABILITY_TYPE_CONFIG) as VulnerabilityType[])
      .map(type => ({
        name: type,
        count: counts[type] || 0,
        fill: VULNERABILITY_TYPE_CONFIG[type].color,
      }))
      .filter(item => item.count > 0);
  }, [vulnerabilities]);

  const handleSelectVulnerability = (vulnerability: Vulnerability) => {
    setSelectedVulnerability(vulnerability);
  };

  const handleCloseModal = () => {
    setSelectedVulnerability(null);
  };

  return (
    <div className="min-h-screen bg-gray-900 text-gray-200 font-sans p-4 sm:p-6 lg:p-8">
      <div className="max-w-7xl mx-auto">
        <Header />
        <main className="mt-8">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-2 bg-gray-800/50 backdrop-blur-sm shadow-lg rounded-xl p-6 border border-gray-700">
              <h2 className="text-xl font-bold text-gray-100 mb-4">Vulnerabilities by Type</h2>
              <div className="h-80">
                <VulnerabilityChart data={chartData} />
              </div>
            </div>
            <div className="bg-gray-800/50 backdrop-blur-sm shadow-lg rounded-xl p-6 border border-gray-700">
              <h2 className="text-xl font-bold text-gray-100 mb-4">Summary by Type</h2>
              <div className="h-80 overflow-y-auto pr-2">
                <VulnerabilitySummary data={chartData} />
              </div>
            </div>
          </div>

          <div className="mt-8">
            {loading && <div className="text-sm text-gray-400 mb-2">Running scan...</div>}
            {error && <div className="text-sm text-red-400 mb-2">{error}</div>}
            <VulnerabilityTable
              vulnerabilities={vulnerabilities}
              onSelectVulnerability={handleSelectVulnerability}
            />
          </div>
        </main>
      </div>
      {selectedVulnerability && (
        <VulnerabilityDetailModal
          vulnerability={selectedVulnerability}
          onClose={handleCloseModal}
        />
      )}
    </div>
  );
};

export default App;
