// VulnerabilitySearch.tsx
// Component for searching and filtering vulnerabilities

import React, { useState, useEffect } from 'react';
import { apiService, type MongoVulnerability, type VulnerabilitySearchResponse } from '../../lib/api';

export const VulnerabilitySearch: React.FC = () => {
  const [data, setData] = useState<VulnerabilitySearchResponse>({
    vulnerabilities: [],
    total: 0,
    by_type: {},
    by_severity: {},
    page: 1,
    per_page: 50
  });
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [filters, setFilters] = useState({
    scan_id: '',
    vuln_type: '',
    severity: '',
    search_term: ''
  });
  const [selectedVuln, setSelectedVuln] = useState<MongoVulnerability | null>(null);

  const fetchVulnerabilities = async () => {
    setLoading(true);
    try {
      const responseData = await apiService.searchVulnerabilities({
        page: currentPage,
        per_page: 50,
        ...(filters.scan_id && { scan_id: filters.scan_id }),
        ...(filters.vuln_type && { vuln_type: filters.vuln_type }),
        ...(filters.severity && { severity: filters.severity })
      });
      
      // Filter by search term on frontend (could be moved to backend)
      let filteredVulns = responseData.vulnerabilities || [];
      if (filters.search_term) {
        const searchLower = filters.search_term.toLowerCase();
        filteredVulns = filteredVulns.filter((vuln: MongoVulnerability) =>
          vuln.url.toLowerCase().includes(searchLower) ||
          vuln.parameter.toLowerCase().includes(searchLower) ||
          vuln.evidence.toLowerCase().includes(searchLower) ||
          (vuln.remediation && vuln.remediation.toLowerCase().includes(searchLower))
        );
      }
      
      setData({
        ...responseData,
        vulnerabilities: filteredVulns
      });
    } catch (error) {
      console.error('Failed to fetch vulnerabilities:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchVulnerabilities();
  }, [currentPage, filters.scan_id, filters.vuln_type, filters.severity]);

  // Debounce search term
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      fetchVulnerabilities();
    }, 500);
    return () => clearTimeout(timeoutId);
  }, [filters.search_term]);

  const handleFilterChange = (key: string, value: string) => {
    setFilters(prev => ({
      ...prev,
      [key]: value
    }));
    if (key !== 'search_term') {
      setCurrentPage(1);
    }
  };

  const clearFilters = () => {
    setFilters({
      scan_id: '',
      vuln_type: '',
      severity: '',
      search_term: ''
    });
    setCurrentPage(1);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'info': return 'bg-gray-100 text-gray-800 border-gray-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type.toLowerCase()) {
      case 'xss': return 'üö®';
      case 'sqli': return 'üíâ';
      case 'csrf': return 'üîÑ';
  case 'broken_access_control': return 'üîê';
  case 'cryptographic_failures': return 'üß¨';
  case 'authentication_failures': return 'üîë';
  case 'integrity_failures': return 'üß±';
  case 'logging_monitoring_failures': return 'ÔøΩ';
  case 'security_misconfiguration': return '‚öôÔ∏è';
  case 'vulnerable_components': return 'üß©';
  case 'ssrf': return 'üì°';
      case 'lfi': return 'ÔøΩüìÅ';
      case 'rfi': return 'üåê';
      default: return '‚ö†Ô∏è';
    }
  };

  const formatDate = (dateStr: string) => {
    return new Date(dateStr).toLocaleString();
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="bg-white rounded-lg shadow-lg">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900 flex items-center gap-2">
            üîç Vulnerability Search
          </h2>
        </div>

        <div className="p-6">
          {/* Search and Filters */}
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Search</label>
              <input
                type="text"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Search URLs, parameters, evidence..."
                value={filters.search_term}
                onChange={(e) => handleFilterChange('search_term', e.target.value)}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Scan ID</label>
              <input
                type="text"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Filter by scan ID..."
                value={filters.scan_id}
                onChange={(e) => handleFilterChange('scan_id', e.target.value)}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Type</label>
              <select
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={filters.vuln_type}
                onChange={(e) => handleFilterChange('vuln_type', e.target.value)}
              >
                <option value="">All types</option>
                <option value="xss">XSS</option>
                <option value="sqli">SQL Injection</option>
                <option value="csrf">CSRF</option>
                <option value="broken_access_control">Broken Access Control</option>
                <option value="cryptographic_failures">Cryptographic Failures</option>
                <option value="authentication_failures">Authentication Failures</option>
                <option value="integrity_failures">Integrity Failures</option>
                <option value="logging_monitoring_failures">Logging & Monitoring Failures</option>
                <option value="security_misconfiguration">Security Misconfiguration</option>
                <option value="vulnerable_components">Vulnerable Components</option>
                <option value="ssrf">SSRF</option>
                <option value="lfi">LFI</option>
                <option value="rfi">RFI</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Severity</label>
              <select
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={filters.severity}
                onChange={(e) => handleFilterChange('severity', e.target.value)}
              >
                <option value="">All severities</option>
                <option value="critical">Critical</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
                <option value="info">Info</option>
              </select>
            </div>

            <div className="flex items-end">
              <button
                onClick={clearFilters}
                className="w-full px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors"
              >
                Clear Filters
              </button>
            </div>
          </div>

          {/* Stats Summary */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="text-sm text-gray-600">Total Found</div>
              <div className="text-2xl font-bold text-gray-900">{data.total}</div>
            </div>
            {Object.entries(data.by_severity).map(([severity, count]) => (
              <div key={severity} className="bg-gray-50 rounded-lg p-4">
                <div className="text-sm text-gray-600 capitalize">{severity}</div>
                <div className="text-2xl font-bold text-gray-900">{count}</div>
              </div>
            ))}
          </div>

          {/* Results */}
          {loading ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
              <p className="mt-2 text-gray-600">Searching vulnerabilities...</p>
            </div>
          ) : data.vulnerabilities.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              üîç No vulnerabilities found matching your criteria
            </div>
          ) : (
            <div className="space-y-4">
              {data.vulnerabilities.map((vuln) => (
                <div
                  key={vuln._id}
                  className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer"
                  onClick={() => setSelectedVuln(vuln)}
                >
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-3">
                      <span className="text-xl">{getTypeIcon(vuln.type)}</span>
                      <div>
                        <h3 className="font-medium text-gray-900 uppercase">{vuln.type}</h3>
                        <p className="text-sm text-gray-600 truncate max-w-md">{vuln.url}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(vuln.severity)}`}>
                        {vuln.severity}
                      </span>
                      <span className="text-xs text-gray-500">
                        CVSS: {vuln.cvss_score.toFixed(1)}
                      </span>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                    <div>
                      <span className="font-medium text-gray-700">Parameter:</span>
                      <span className="ml-2 text-gray-600">{vuln.parameter || 'N/A'}</span>
                    </div>
                    <div>
                      <span className="font-medium text-gray-700">Confidence:</span>
                      <span className="ml-2 text-gray-600">{vuln.confidence}</span>
                    </div>
                    <div>
                      <span className="font-medium text-gray-700">Found:</span>
                      <span className="ml-2 text-gray-600">{formatDate(vuln.created_at)}</span>
                    </div>
                  </div>

                  {vuln.ai_summary && (
                    <div className="mt-3 p-3 bg-blue-50 rounded-md">
                      <p className="text-sm text-blue-800">
                        <span className="font-medium">AI Summary:</span> {vuln.ai_summary}
                      </p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}

          {/* Pagination */}
          {data.total > data.per_page && (
            <div className="flex items-center justify-center gap-2 mt-6">
              <button
                className="px-3 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors disabled:opacity-50"
                onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                disabled={currentPage === 1}
              >
                Previous
              </button>
              <span className="px-3 py-2 text-gray-700">
                Page {currentPage} of {Math.ceil(data.total / data.per_page)}
              </span>
              <button
                className="px-3 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors disabled:opacity-50"
                onClick={() => setCurrentPage(prev => prev + 1)}
                disabled={currentPage >= Math.ceil(data.total / data.per_page)}
              >
                Next
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Vulnerability Detail Modal */}
      {selectedVuln && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[80vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-gray-900 flex items-center gap-2">
                  {getTypeIcon(selectedVuln.type)} {selectedVuln.type.toUpperCase()} Vulnerability
                </h2>
                <button
                  onClick={() => setSelectedVuln(null)}
                  className="text-gray-400 hover:text-gray-600 text-xl"
                >
                  √ó
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">URL</label>
                  <p className="text-sm text-gray-900 bg-gray-50 p-2 rounded break-all">{selectedVuln.url}</p>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Parameter</label>
                    <p className="text-sm text-gray-900 bg-gray-50 p-2 rounded">{selectedVuln.parameter || 'N/A'}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Severity</label>
                    <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(selectedVuln.severity)}`}>
                      {selectedVuln.severity}
                    </span>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Payload</label>
                  <p className="text-sm text-gray-900 bg-gray-50 p-2 rounded font-mono break-all">{selectedVuln.payload}</p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Evidence</label>
                  <p className="text-sm text-gray-900 bg-gray-50 p-2 rounded whitespace-pre-wrap">{selectedVuln.evidence}</p>
                </div>

                {selectedVuln.remediation && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Remediation</label>
                    <p className="text-sm text-gray-900 bg-green-50 p-2 rounded">{selectedVuln.remediation}</p>
                  </div>
                )}

                {selectedVuln.ai_summary && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">AI Analysis</label>
                    <p className="text-sm text-gray-900 bg-blue-50 p-2 rounded">{selectedVuln.ai_summary}</p>
                  </div>
                )}

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">CVSS Score</label>
                    <p className="text-sm text-gray-900">{selectedVuln.cvss_score.toFixed(1)}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">EPSS Score</label>
                    <p className="text-sm text-gray-900">{selectedVuln.epss_score.toFixed(3)}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Confidence</label>
                    <p className="text-sm text-gray-900">{selectedVuln.confidence}</p>
                  </div>
                </div>

                <div className="text-xs text-gray-500">
                  <p>Scan ID: {selectedVuln.scan_id}</p>
                  <p>Found: {formatDate(selectedVuln.created_at)}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
